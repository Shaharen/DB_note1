
* 라면
라면 구입 -> 보관 -> 꺼내기 -> 요리 및 가공 -> 식사

* 데이터				      :	
데이터 수집 -> 데이터 저장 -> 데이터 분석 -> 데이터 예측 -> 데이터 결과 서비스
		||		      :	   ||		||
	      데이터 베이스		      :	딥러닝	           Java, app
				      :
 < 빅데이터 중심> 			      :	< 인공지능 중심>

* 정보 : 데이터를 가공하여 만든 결과
  1       +      1       =   2
(data) (가공) (data)       (정보)

  1       +      1       =   3
(data) (가공) (data)       (잘못된 정보 = 정보는 맞음)

* 데이터 베이스 : 정확한(무결성이 보장된) 데이터를 모아놓은 집합, 저장소
* 데이터 무결성 : 데이터 정확성
* 테이블(표 제목) : 데이터를 저장하는 단위
* 컬럼(표의 열이름) : 테이블에 저장하는 데이터의 분류(속성)를 의미
		하나의 테이블은 여러개의 컬럼들로 구성

ex) 주민등록번호  => 값이 반드시 있어야함 = not null
		   값이 중복되지 않아야함 = unique

- 재료 - a.hwp(디스크에 보관)
- 작업도구 - 프로세스(한글, cpu) 가 디스크에 관여
- 작업공간 - 메모리(ram)로 재료 이동 -> 저장 시 디스크로 다시 이동
- 블록(block) : 재료저장의 최소 단위
 -> 헤더(주소)와 값으로 이루어짐

- null : 저장공간이 할당되었지만 값이 비어있음 -> 연산으로 null을 찾아낼 수 있음

* 기본키( Primary Key )
 - 테이블을 구성하는 컬럼중에 테이블을 대표하는 컬럼에 설치.
 - not null + Unique 의 특징을 가짐
 - 하나의 테이블에 한개의 컬럼에 한개의 PK 설치


- 물리적 저장은 됨  // 논리적 저장은 안됨 -> 무결성이 깨졌다 -> 데이터가 정확하지않다.

* 외부키(= 참조키) ( Foreign Key )
 - 다른 테이블의 컬럼의 데이터를 참조할 때 사용
 - 테이블과 테이블의 관계 설정 ( 연결 )
 - 무결성 보장, 종속적인 삭제 방지
 - 외부키가 존재하면 -> 관계형 데이터베이스

* 데이터 처리( 정보 처리 ) 
 1. 일괄처리		- 작업을 모아서 한번에 처리 ( 안정적 )
 2. 실시간 온라인 처리
 3. 분산처리
 4. 하이브리드 처리

 - DB는 사용자 요청은 실시간처리, DB 내부에서는 일괄처리로 이루어짐

* 트랜잭션 - 데이터베이스 내에서 발생하는 작업의 단위 ( 일괄처리의 기준 )
 작업시작 = 트랜잭션 시작
 작업종료 = 트랜잭션 종료    즉, 트랜잭션 : 작업시작 ~ 작업종료
 -> 트랜잭션이 시작되면 Commit 이나 Rollback 둘 중 하나가 실행됨
 - 원자성 :  All or Nothing

* Commit : 트랜잭션 종료 후 트랜잭션의 수행 내용을 DB에 물리적으로 영구히 저장
 -> 잘못된 트랜잭션을 저장할 경우 DB의 무결성 파괴

* Rollback : 비정상적인 트랜잭션을 취소시켜 트랜잭션 이전 시점으로 다시 복구
 -> 데이터 손실 == 트랜잭션 안에서 있었던 정상적인 작업도 전부 취소됨

* 트랜잭션의 사이즈가 크면
 -> 동시성이 떨어짐( 한번에 접근할 수 있는 수 감소 ), 롤백시 데이터 손실이 크다