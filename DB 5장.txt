p. 233

그룹 함수 ( = 집계함수)
- 특정그룹을 만들어 그룹별 한개의 결과값을 출력

1. avg  sum

select avg(salary), sum(salary)
from employees
==> salary 의 평균과 총합

select avg(last_name), sum(last_name)
from employees
/
==> 에러 

select avg(hire_date), sum(hire_date)
from employees
/
==> 에러
========> avg 와 sum 은 숫자 data 에서만 사용가능!!

2. min  max

select min(hire_date), max(hire_date)
from employees

select min(salary), max(salary), min(last_name), max(last_name)
from employees
/
=========> min 와 max 는 모든 타입에서 사용가능 ( => 아스키 코드로 분별함 )

3. count

select count(*)		==> count ( 행 전체 )
from employees

=========> count 는 출력되는 행의 개수 출력

select count(*)
from employees
where department_id = 50
=> 부서명이 50인 사원의 수

select count(commission_pct)
from employees
=> 보너스를 받는 사원의 수 => 35

select count(commission_pct)
from employees
where department_id = 80
=> 80번 부서에 근무하는 사원 중 보너스를 받는 사원

select count(department_id)
from employees
=> 부서번호의 개수를 세어라
=> 사원이 근무를 하고 있는 부서의 수

select count(distinct department_id)
from employees
=> 위에서 중복 제거


4. 그룹함수의 추가 성질
 1) all - default( 생략 가능 ) ex) count = count all
 2) distinct 
   -> 함수가 사용하는 개별문임
   -> 전체 select 문에 영향을 끼치지않음
==> 	select distinct count(department_id)
	from employees
	-> count 실행 후 distinct 실행
	-> count 로 행 1개만 나오므로 의미없는 행위


select avg(commission_pct), sum(commission_pct)
from employees

select avg(nvl(commission_pct,0)), sum(commission_pct)/107
from employees

==> 두개의 출력이 같음

p.246 --------------------------------------------------------------------------

group by 절
- where 절과 order by 절 사이에 위치한다

예제 ) 부서별 월급의 총합을 구하시오

select department_id, sum(salary)
from employees
==> 에러
===> d _id 가 그룹화가 되어있지않아 sum에서 에러
==> 그룹화를 시켜줘야함 -> group by 절 사용

select department_id, sum(salary)
from employees
group by department_id


select department_id dept_id, job_id, sum(salary)
from employees
group by department_id, job_id
=> 부서별 내부에 있는 직업별 월급의 합



부서별 내부에 있는 직업별 월급의 합
+ 부서별 총합
+ 전체 월급 총합		까지 알고싶을때?

1. set
2. group by 절에 roll up ,cube 를 사용하면됨
- roll up
-> 	select department_id dept_id, job_id, sum(salary)
	from employees
	group by rollup(department_id, job_id)
	order by department_id

-> 전체 후 오른쪽부터 삭제하며 진행함  (d_id = a , job_id = b 라고 하면 )
-> 하위 그룹을 뽑을때 사용
	a , b , sum
	a     , sum
	        sum	순으로 출력됨

- cube
-> 	select department_id dept_id, job_id, sum(salary)
	from employees
	group by cube(department_id, job_id)
	order by department_id

-> 전체 후 오른쪽부터 삭제하며 진행하고 그 후 다시 왼쪽부터 삭제하며 진행함
-> 조합가능한 모든 그룹을 뽑을때 사용	 
	a , b , sum
	a     , sum
	        sum
	    b , sum	순으로 출력됨

select employee_id, sum(salary)
from employees
group by employee_id
==> e_id 에 겹치는게 없으니 ( 즉 PK ) group by가 의미없음



p. 252 --------------------------------------------------------------------------

* Having 절
- where 절과 order by 절 사이에 위치
- group by 와는 순서 상관없으나 group by, having 순으로 작성
*  조건절
 1. where => 행(=column)을 제한 => group by 보다 먼저 실행
 2. having => 그룹을 제한 => group by 다음에 실행



select department_id, avg(salary)
from employees
where avg(salary) > 8000
group by department_id
=> 에러
=> where 에 그룹함수 사용 불가
==> 실행순서 : from -> where -> group by -> select 순으로 진행됨
==> 그룹이 where 절을 인지 못함


select department_id, avg(salary)
from employees
having avg(salary) > 8000
group by department_id
=> having 절로 변경하여 실행순서 변경

p.256
				순서
select job_id, sum(salary) payroll	5
from employees			1
where job_id not like '%REP%'	2
group by job_id			3
having sum(salary) > 13000		4
order by sum(salary)		6

=> rep가 없는 직업들 중에서 월급합이 13000보다 큰 직업별 총합을
 작은 급여 순서대로 직업과 월급합을 출력하라
 월급합은 payroll로 출력
( 직원들 중 업무가 rep가 아닌 사람들을 업무를 그룹해서
 업무 별 급여 총합이 13000이 넘는 업무를 오름차순 )

select department_id, max(avg(salary))
from employees
group by department_id
=> 에러
==> group by 로 인해 여러값이 출력되야하지만 max 때문에 값이 1개만 출력됨


==========================================================
==========================================================

select distinct      *     column  alias		=> 출력과 관련된 절
        중복 제거  모든    특정    출력 이름 변경 ( column 한개당 한개만 가능 )
from ( 테이블이 여러개 -> 조인 )

where
	1. 조건식 사용 ( column  연산자  값 )
	2. 값 사용시 날짜와 문자는 ' ' 를 사용
	3. 값 사용시 테이블에 저장된 형식을 사용해야한다 ( 대소문자 구분 )
	4. 조인 발생시  n-1개 조인조건 작성 , 소유주의 이름 접두에 표기 
	5. 조건 추가시 and, or 사용 - 조건식으로 이뤄짐
group by
	1. avg, sum, max, min, count(column) == 널값 무시
	2. count(*) == 널값 인정
	3. alias 사용 x
having
	1. 그룹에 대한 조건절 작성
	2. where ~ order by 사이에만 위치한다면 group by 와 순서는 변경되어도 됨
	3. alias 사용 x
order by
	1. column asc == default
	2. column desc
	3. alias 사용 가능

==========================================================
==========================================================


예제 )  회사 전체의 최대 급여, 최소 급여, 급여 총합 및 평균 급여를 출력

select max(salary), min(salary), sum(salary), avg(salary)
from employees

예제 ) 각 직업별 최대 급여, 최소 급여, 급여 총합 및 평균 급여를 출력
최대 급여는 MAX 최소 급여는 MIN 급여총합은 SUM 평균급여는 AVG 로 출력
직업은 오름차순으로 정렬

select job_id, max(salary) max, min(salary) min, sum(salary) sum, avg(salary) avg
from employees
group by job_id
order by job_id

예제) 동일한 직업을 가진 사원들의 총 수를 구하시오

select job_id, count(employee_id)
from employees
group by job_id

예제) 매니저로 근무하는 사원들의 총 수를 출력하시오

select count(distinct manager_id)
from employees

예제) 사내의 최대 급여 및 최소 급여의 차이를 출력하시오

select max(salary), min(salary), max(salary)-min(salary) differnece
from employees


예제) 매니저의 사번 및 그 매니저 밑 사원들 중 최소 급여를 받는 사원의 급여를 출력
 - 매니저가 없는 사원은 제외 / 최소 급여가 5000미만인 경우 제외 / 급여 기준 역순으로 조회

select manager_id, min(salary)
from employees
where manager_id is not null
group by manager_id
having min(salary) >= 5000
order by min(salary) desc

예제) 부서 명, 부서위치 ID, 각 부서별 사원 총 수, 각 부서별 평균 급여를 출력
 - 부서위치를 오름차순으로 출력

select d.department_name, d.location_id, count(e.employee_id), avg(e.salary)
from departments d, employees e
where d.department_id = e.department_id
group by d.department_name, d.location_id
order by d.location_id

** select list 절에 그룹함수가 사용되면 다른 list들은 group by 절에 반드시 그룹화

예제) Abel이라는 사원이 받는 급여보다 더 많은 급여를 받는 사원의 이름과 급여를 출력

select last_name, salary
from employees
where last_name = 'Abel'

으로 Abel의 급여를 11000임을 찾고

where salary > 11000 으로 바꿔서 출력함
==> 비효율적임! ==> 한번에 하자 ! =========>>> 6장








